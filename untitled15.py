# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewnBK4SHC85Olfm_8m8gGMJVfuFGR2re
"""

from transformers import DetrImageProcessor, DetrForObjectDetection
import torch
from PIL import Image, ImageDraw, ImageFont
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Step 1: Use JavaScript to automatically capture an image from the webcam in Colab
from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def capture_image_auto():
    """
    Automatically captures an image from the webcam using JavaScript in Google Colab.
    """
    js = Javascript('''
        async function takePhoto() {
            const video = document.createElement('video');
            const canvas = document.createElement('canvas');
            const stream = await navigator.mediaDevices.getUserMedia({video: true});
            video.srcObject = stream;
            await video.play();

            // Wait for the video stream to be ready
            await new Promise(resolve => setTimeout(resolve, 2000));

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);
            stream.getTracks().forEach(track => track.stop());

            return canvas.toDataURL('image/png');
        }

        takePhoto();
    ''')
    display(js)
    data = eval_js('takePhoto()')
    image_bytes = b64decode(data.split(',')[1])
    with open('webcam_image.png', 'wb') as f:
        f.write(image_bytes)
    return 'webcam_image.png'

# Step 2: Capture image automatically
image_path = capture_image_auto()

# Step 3: Load captured image and ensure proper format
image = Image.open(image_path).convert("RGB")  # Convert to RGB format

# Step 4: Load DETR model and processor
processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50", revision="no_timm")
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50", revision="no_timm")

# Step 5: Preprocess and detect objects
inputs = processor(images=image, return_tensors="pt")  # Ensure the image is in the correct format
outputs = model(**inputs)

# Post-process detections
target_sizes = torch.tensor([image.size[::-1]])  # Image size as (height, width)
results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]

# Step 6: Draw rectangles and labels
draw = ImageDraw.Draw(image)
font = ImageFont.load_default()

for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    box = [round(i, 2) for i in box.tolist()]
    label_text = f"{model.config.id2label[label.item()]}: {round(score.item(), 3)}"
    print(f"Detected {label_text} at location {box}")

    # Draw rectangle
    draw.rectangle(box, outline="red", width=3)

    # Draw label
    draw.text((box[0], box[1] - 10), label_text, fill="red", font=font)

# Step 7: Display image with bounding boxes
image.show()

# Alternatively, use OpenCV to display in Colab
image_cv = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
cv2_imshow(image_cv)